/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/mobile-enhancements.js":
/*!************************************!*\
  !*** ./src/mobile-enhancements.js ***!
  \************************************/
/***/ (() => {

eval("/**\r\n * Mobile & Responsive Enhancements\r\n * Improves the experience on mobile devices\r\n */\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n  console.log(\"ðŸ“± Initializing Mobile Enhancements...\");\r\n  \r\n  // Configuration\r\n  const config = {\r\n    // Breakpoints\r\n    breakpoints: {\r\n      mobile: 768,\r\n      tablet: 1024\r\n    },\r\n    \r\n    // Touch settings\r\n    touch: {\r\n      tapThreshold: 10, // px\r\n      doubleTapDelay: 300, // ms\r\n      longPressDelay: 500, // ms\r\n      dragThreshold: 5 // px\r\n    }\r\n  };\r\n  \r\n  // State\r\n  const state = {\r\n    isMobile: false,\r\n    isTablet: false,\r\n    touchStartX: 0,\r\n    touchStartY: 0,\r\n    touchStartTime: 0,\r\n    lastTapTime: 0,\r\n    isDragging: false,\r\n    longPressTimer: null,\r\n    currentLayout: 'desktop'\r\n  };\r\n  \r\n  // Initialize mobile enhancements\r\n  function initMobileEnhancements() {\r\n    // Check device type\r\n    checkDeviceType();\r\n    \r\n    // Add viewport meta tag if missing\r\n    addViewportMeta();\r\n    \r\n    // Add touch event handlers\r\n    addTouchHandlers();\r\n    \r\n    // Add resize handler\r\n    window.addEventListener(\"resize\", handleResize);\r\n    \r\n    // Initial layout adjustment\r\n    adjustLayout();\r\n    \r\n    console.log(`ðŸ“± Mobile Enhancements initialized (${state.currentLayout} mode)`);\r\n  }\r\n  \r\n  // Check device type\r\n  function checkDeviceType() {\r\n    const width = window.innerWidth;\r\n    state.isMobile = width <= config.breakpoints.mobile;\r\n    state.isTablet = width > config.breakpoints.mobile && width <= config.breakpoints.tablet;\r\n    \r\n    // Set layout mode\r\n    if (state.isMobile) {\r\n      state.currentLayout = 'mobile';\r\n    } else if (state.isTablet) {\r\n      state.currentLayout = 'tablet';\r\n    } else {\r\n      state.currentLayout = 'desktop';\r\n    }\r\n    \r\n    // Add class to body\r\n    document.body.classList.remove('layout-mobile', 'layout-tablet', 'layout-desktop');\r\n    document.body.classList.add(`layout-${state.currentLayout}`);\r\n  }\r\n  \r\n  // Add viewport meta tag if missing\r\n  function addViewportMeta() {\r\n    if (!document.querySelector('meta[name=\"viewport\"]')) {\r\n      const meta = document.createElement('meta');\r\n      meta.name = 'viewport';\r\n      meta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';\r\n      document.head.appendChild(meta);\r\n      console.log(\"ðŸ“± Added viewport meta tag\");\r\n    }\r\n  }\r\n  \r\n  // Add touch event handlers\r\n  function addTouchHandlers() {\r\n    // Desktop icons\r\n    document.querySelectorAll(\".desktop-icon\").forEach(icon => {\r\n      icon.addEventListener(\"touchstart\", handleTouchStart);\r\n      icon.addEventListener(\"touchmove\", handleTouchMove);\r\n      icon.addEventListener(\"touchend\", handleTouchEnd);\r\n    });\r\n    \r\n    // Windows\r\n    document.querySelectorAll(\".popup-window\").forEach(win => {\r\n      // Window headers for dragging\r\n      const header = win.querySelector(\".window-header\");\r\n      if (header) {\r\n        header.addEventListener(\"touchstart\", handleWindowTouchStart);\r\n        header.addEventListener(\"touchmove\", handleWindowTouchMove);\r\n        header.addEventListener(\"touchend\", handleWindowTouchEnd);\r\n      }\r\n      \r\n      // Window content for scrolling\r\n      const content = win.querySelector(\".window-content\");\r\n      if (content) {\r\n        content.addEventListener(\"touchstart\", (e) => {\r\n          // Allow default behavior for scrolling\r\n          e.stopPropagation();\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Taskbar\r\n    const taskbar = document.getElementById(\"start-bar\");\r\n    if (taskbar) {\r\n      taskbar.addEventListener(\"touchstart\", (e) => {\r\n        // Prevent default to avoid triggering clicks on desktop\r\n        e.stopPropagation();\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Handle touch start on desktop icons\r\n  function handleTouchStart(e) {\r\n    // Store touch start position and time\r\n    state.touchStartX = e.touches[0].clientX;\r\n    state.touchStartY = e.touches[0].clientY;\r\n    state.touchStartTime = Date.now();\r\n    state.isDragging = false;\r\n    \r\n    // Set up long press timer\r\n    state.longPressTimer = setTimeout(() => {\r\n      // Trigger long press\r\n      handleLongPress(e);\r\n    }, config.touch.longPressDelay);\r\n  }\r\n  \r\n  // Handle touch move on desktop icons\r\n  function handleTouchMove(e) {\r\n    // Check if dragging\r\n    const touchX = e.touches[0].clientX;\r\n    const touchY = e.touches[0].clientY;\r\n    const deltaX = Math.abs(touchX - state.touchStartX);\r\n    const deltaY = Math.abs(touchY - state.touchStartY);\r\n    \r\n    // If moved beyond threshold, cancel long press and mark as dragging\r\n    if (deltaX > config.touch.dragThreshold || deltaY > config.touch.dragThreshold) {\r\n      clearTimeout(state.longPressTimer);\r\n      state.isDragging = true;\r\n    }\r\n  }\r\n  \r\n  // Handle touch end on desktop icons\r\n  function handleTouchEnd(e) {\r\n    // Clear long press timer\r\n    clearTimeout(state.longPressTimer);\r\n    \r\n    // If not dragging, handle as tap\r\n    if (!state.isDragging) {\r\n      const touchEndTime = Date.now();\r\n      const touchDuration = touchEndTime - state.touchStartTime;\r\n      \r\n      // Check for double tap\r\n      if (touchEndTime - state.lastTapTime < config.touch.doubleTapDelay) {\r\n        // Handle double tap\r\n        handleDoubleTap(e);\r\n        state.lastTapTime = 0; // Reset to prevent triple tap\r\n      } else {\r\n        // Handle single tap\r\n        handleTap(e);\r\n        state.lastTapTime = touchEndTime;\r\n      }\r\n    }\r\n    \r\n    // Reset state\r\n    state.isDragging = false;\r\n  }\r\n  \r\n  // Handle tap on desktop icons\r\n  function handleTap(e) {\r\n    const icon = e.currentTarget;\r\n    \r\n    // Get window ID\r\n    const windowId = icon.getAttribute(\"data-window\") || icon.id.replace(\"icon-\", \"\");\r\n    \r\n    // Open window\r\n    if (typeof openWindow === 'function') {\r\n      openWindow(windowId);\r\n    }\r\n  }\r\n  \r\n  // Handle double tap on desktop icons\r\n  function handleDoubleTap(e) {\r\n    // Same as single tap for now\r\n    handleTap(e);\r\n  }\r\n  \r\n  // Handle long press on desktop icons\r\n  function handleLongPress(e) {\r\n    // Show context menu if available\r\n    const icon = e.currentTarget;\r\n    \r\n    // Create simple context menu if not exists\r\n    let contextMenu = document.getElementById(\"mobile-context-menu\");\r\n    if (!contextMenu) {\r\n      contextMenu = document.createElement(\"div\");\r\n      contextMenu.id = \"mobile-context-menu\";\r\n      contextMenu.style.position = \"fixed\";\r\n      contextMenu.style.backgroundColor = \"rgba(0, 0, 0, 0.9)\";\r\n      contextMenu.style.border = \"1px solid #00ffff\";\r\n      contextMenu.style.borderRadius = \"5px\";\r\n      contextMenu.style.padding = \"10px\";\r\n      contextMenu.style.zIndex = \"10000\";\r\n      document.body.appendChild(contextMenu);\r\n      \r\n      // Close on tap outside\r\n      document.addEventListener(\"touchstart\", (e) => {\r\n        if (contextMenu.style.display === \"block\" && !contextMenu.contains(e.target)) {\r\n          contextMenu.style.display = \"none\";\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Get window ID\r\n    const windowId = icon.getAttribute(\"data-window\") || icon.id.replace(\"icon-\", \"\");\r\n    \r\n    // Clear existing menu items\r\n    contextMenu.innerHTML = \"\";\r\n    \r\n    // Add menu items\r\n    addContextMenuItem(contextMenu, \"Open\", () => {\r\n      if (typeof openWindow === 'function') {\r\n        openWindow(windowId);\r\n      }\r\n      contextMenu.style.display = \"none\";\r\n    });\r\n    \r\n    // Position menu near the icon\r\n    const rect = icon.getBoundingClientRect();\r\n    contextMenu.style.left = `${rect.left}px`;\r\n    contextMenu.style.top = `${rect.bottom + 10}px`;\r\n    \r\n    // Show menu\r\n    contextMenu.style.display = \"block\";\r\n  }\r\n  \r\n  // Add context menu item\r\n  function addContextMenuItem(menu, text, action) {\r\n    const item = document.createElement(\"div\");\r\n    item.textContent = text;\r\n    item.style.padding = \"10px\";\r\n    item.style.color = \"#00ffff\";\r\n    item.style.fontFamily = \"'VT323', monospace\";\r\n    item.style.fontSize = \"16px\";\r\n    item.style.cursor = \"pointer\";\r\n    \r\n    // Add hover effect\r\n    item.addEventListener(\"mouseover\", () => {\r\n      item.style.backgroundColor = \"rgba(0, 255, 255, 0.2)\";\r\n    });\r\n    \r\n    item.addEventListener(\"mouseout\", () => {\r\n      item.style.backgroundColor = \"transparent\";\r\n    });\r\n    \r\n    // Add click handler\r\n    item.addEventListener(\"click\", action);\r\n    \r\n    // Add to menu\r\n    menu.appendChild(item);\r\n    \r\n    return item;\r\n  }\r\n  \r\n  // Handle touch start on window headers\r\n  function handleWindowTouchStart(e) {\r\n    // Store touch start position and time\r\n    state.touchStartX = e.touches[0].clientX;\r\n    state.touchStartY = e.touches[0].clientY;\r\n    state.touchStartTime = Date.now();\r\n    state.isDragging = false;\r\n    \r\n    // Get window\r\n    const header = e.currentTarget;\r\n    const win = header.closest(\".popup-window\");\r\n    \r\n    // Focus window\r\n    if (win && typeof focusWindow === 'function') {\r\n      focusWindow(win.id);\r\n    }\r\n    \r\n    // Set up long press timer\r\n    state.longPressTimer = setTimeout(() => {\r\n      // Trigger long press\r\n      handleWindowLongPress(e);\r\n    }, config.touch.longPressDelay);\r\n  }\r\n  \r\n  // Handle touch move on window headers\r\n  function handleWindowTouchMove(e) {\r\n    // Check if dragging\r\n    const touchX = e.touches[0].clientX;\r\n    const touchY = e.touches[0].clientY;\r\n    const deltaX = Math.abs(touchX - state.touchStartX);\r\n    const deltaY = Math.abs(touchY - state.touchStartY);\r\n    \r\n    // If moved beyond threshold, cancel long press and mark as dragging\r\n    if (deltaX > config.touch.dragThreshold || deltaY > config.touch.dragThreshold) {\r\n      clearTimeout(state.longPressTimer);\r\n      state.isDragging = true;\r\n      \r\n      // Get window\r\n      const header = e.currentTarget;\r\n      const win = header.closest(\".popup-window\");\r\n      \r\n      // Move window\r\n      if (win) {\r\n        // Calculate new position\r\n        const dx = touchX - state.touchStartX;\r\n        const dy = touchY - state.touchStartY;\r\n        \r\n        const left = parseInt(win.style.left || 0) + dx;\r\n        const top = parseInt(win.style.top || 0) + dy;\r\n        \r\n        // Apply new position\r\n        win.style.left = `${left}px`;\r\n        win.style.top = `${top}px`;\r\n        \r\n        // Update touch start position\r\n        state.touchStartX = touchX;\r\n        state.touchStartY = touchY;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Handle touch end on window headers\r\n  function handleWindowTouchEnd(e) {\r\n    // Clear long press timer\r\n    clearTimeout(state.longPressTimer);\r\n    \r\n    // If not dragging, handle as tap\r\n    if (!state.isDragging) {\r\n      const touchEndTime = Date.now();\r\n      \r\n      // Check for double tap\r\n      if (touchEndTime - state.lastTapTime < config.touch.doubleTapDelay) {\r\n        // Handle double tap\r\n        handleWindowDoubleTap(e);\r\n        state.lastTapTime = 0; // Reset to prevent triple tap\r\n      } else {\r\n        // Handle single tap\r\n        handleWindowTap(e);\r\n        state.lastTapTime = touchEndTime;\r\n      }\r\n    }\r\n    \r\n    // Reset state\r\n    state.isDragging = false;\r\n  }\r\n  \r\n  // Handle tap on window headers\r\n  function handleWindowTap(e) {\r\n    // Just focus the window\r\n    const header = e.currentTarget;\r\n    const win = header.closest(\".popup-window\");\r\n    \r\n    if (win && typeof focusWindow === 'function') {\r\n      focusWindow(win.id);\r\n    }\r\n  }\r\n  \r\n  // Handle double tap on window headers\r\n  function handleWindowDoubleTap(e) {\r\n    // Toggle maximize\r\n    const header = e.currentTarget;\r\n    const win = header.closest(\".popup-window\");\r\n    \r\n    if (win && typeof toggleMaximize === 'function') {\r\n      toggleMaximize(win.id);\r\n    }\r\n  }\r\n  \r\n  // Handle long press on window headers\r\n  function handleWindowLongPress(e) {\r\n    // Show window context menu\r\n    const header = e.currentTarget;\r\n    const win = header.closest(\".popup-window\");\r\n    \r\n    if (!win) return;\r\n    \r\n    // Create window context menu if not exists\r\n    let contextMenu = document.getElementById(\"window-context-menu\");\r\n    if (!contextMenu) {\r\n      contextMenu = document.createElement(\"div\");\r\n      contextMenu.id = \"window-context-menu\";\r\n      contextMenu.style.position = \"fixed\";\r\n      contextMenu.style.backgroundColor = \"rgba(0, 0, 0, 0.9)\";\r\n      contextMenu.style.border = \"1px solid #00ffff\";\r\n      contextMenu.style.borderRadius = \"5px\";\r\n      contextMenu.style.padding = \"10px\";\r\n      contextMenu.style.zIndex = \"10000\";\r\n      document.body.appendChild(contextMenu);\r\n      \r\n      // Close on tap outside\r\n      document.addEventListener(\"touchstart\", (e) => {\r\n        if (contextMenu.style.display === \"block\" && !contextMenu.contains(e.target)) {\r\n          contextMenu.style.display = \"none\";\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Clear existing menu items\r\n    contextMenu.innerHTML = \"\";\r\n    \r\n    // Add menu items\r\n    addContextMenuItem(contextMenu, \"Minimize\", () => {\r\n      if (typeof minimizeWindow === 'function') {\r\n        minimizeWindow(win.id);\r\n      }\r\n      contextMenu.style.display = \"none\";\r\n    });\r\n    \r\n    addContextMenuItem(contextMenu, \"Maximize\", () => {\r\n      if (typeof toggleMaximize === 'function') {\r\n        toggleMaximize(win.id);\r\n      }\r\n      contextMenu.style.display = \"none\";\r\n    });\r\n    \r\n    addContextMenuItem(contextMenu, \"Close\", () => {\r\n      if (typeof closeWindow === 'function') {\r\n        closeWindow(win.id);\r\n      }\r\n      contextMenu.style.display = \"none\";\r\n    });\r\n    \r\n    // Position menu near the header\r\n    const rect = header.getBoundingClientRect();\r\n    contextMenu.style.left = `${rect.left}px`;\r\n    contextMenu.style.top = `${rect.bottom + 10}px`;\r\n    \r\n    // Show menu\r\n    contextMenu.style.display = \"block\";\r\n  }\r\n  \r\n  // Handle resize\r\n  function handleResize() {\r\n    // Check device type\r\n    checkDeviceType();\r\n    \r\n    // Adjust layout\r\n    adjustLayout();\r\n  }\r\n  \r\n  // Adjust layout based on device type\r\n  function adjustLayout() {\r\n    if (state.isMobile) {\r\n      // Mobile layout adjustments\r\n      adjustMobileLayout();\r\n    } else if (state.isTablet) {\r\n      // Tablet layout adjustments\r\n      adjustTabletLayout();\r\n    } else {\r\n      // Desktop layout adjustments\r\n      adjustDesktopLayout();\r\n    }\r\n  }\r\n  \r\n  // Adjust layout for mobile\r\n  function adjustMobileLayout() {\r\n    // Make windows full screen when opened\r\n    if (typeof window.openWindow === 'function') {\r\n      const originalOpenWindow = window.openWindow;\r\n      \r\n      window.openWindow = function(id) {\r\n        const win = originalOpenWindow(id);\r\n        \r\n        if (win) {\r\n          // Make window full screen\r\n          win.style.width = \"100%\";\r\n          win.style.height = \"calc(100% - 40px)\"; // Leave space for taskbar\r\n          win.style.left = \"0\";\r\n          win.style.top = \"0\";\r\n          \r\n          // Add mobile class\r\n          win.classList.add(\"mobile-window\");\r\n        }\r\n        \r\n        return win;\r\n      };\r\n    }\r\n    \r\n    // Adjust existing windows\r\n    document.querySelectorAll(\".popup-window\").forEach(win => {\r\n      // Make window full screen\r\n      win.style.width = \"100%\";\r\n      win.style.height = \"calc(100% - 40px)\"; // Leave space for taskbar\r\n      win.style.left = \"0\";\r\n      win.style.top = \"0\";\r\n      \r\n      // Add mobile class\r\n      win.classList.add(\"mobile-window\");\r\n    });\r\n    \r\n    // Adjust desktop icons for mobile\r\n    document.querySelectorAll(\".desktop-icon\").forEach(icon => {\r\n      // Make icons larger and more touch-friendly\r\n      icon.style.width = \"80px\";\r\n      icon.style.height = \"80px\";\r\n      icon.style.margin = \"10px\";\r\n    });\r\n    \r\n    // Adjust taskbar for mobile\r\n    const taskbar = document.getElementById(\"start-bar\");\r\n    if (taskbar) {\r\n      taskbar.style.height = \"50px\"; // Taller for touch\r\n    }\r\n  }\r\n  \r\n  // Adjust layout for tablet\r\n  function adjustTabletLayout() {\r\n    // Make windows larger but not full screen\r\n    if (typeof window.openWindow === 'function') {\r\n      const originalOpenWindow = window.openWindow;\r\n      \r\n      window.openWindow = function(id) {\r\n        const win = originalOpenWindow(id);\r\n        \r\n        if (win) {\r\n          // Make window larger\r\n          win.style.width = \"80%\";\r\n          win.style.height = \"80%\";\r\n          \r\n          // Center window\r\n          win.style.left = \"10%\";\r\n          win.style.top = \"10%\";\r\n          \r\n          // Add tablet class\r\n          win.classList.add(\"tablet-window\");\r\n        }\r\n        \r\n        return win;\r\n      };\r\n    }\r\n    \r\n    // Adjust existing windows\r\n    document.querySelectorAll(\".popup-window\").forEach(win => {\r\n      // Make window larger\r\n      win.style.width = \"80%\";\r\n      win.style.height = \"80%\";\r\n      \r\n      // Center window\r\n      win.style.left = \"10%\";\r\n      win.style.top = \"10%\";\r\n      \r\n      // Add tablet class\r\n      win.classList.add(\"tablet-window\");\r\n    });\r\n    \r\n    // Adjust desktop icons for tablet\r\n    document.querySelectorAll(\".desktop-icon\").forEach(icon => {\r\n      // Make icons slightly larger\r\n      icon.style.width = \"70px\";\r\n      icon.style.height = \"70px\";\r\n      icon.style.margin = \"8px\";\r\n    });\r\n  }\r\n  \r\n  // Adjust layout for desktop\r\n  function adjustDesktopLayout() {\r\n    // Restore windows to their original size and position\r\n    document.querySelectorAll(\".popup-window\").forEach(win => {\r\n      // Remove mobile/tablet classes\r\n      win.classList.remove(\"mobile-window\", \"tablet-window\");\r\n    });\r\n    \r\n    // Restore desktop icons\r\n    document.querySelectorAll(\".desktop-icon\").forEach(icon => {\r\n      // Reset to default size\r\n      icon.style.width = \"\";\r\n      icon.style.height = \"\";\r\n      icon.style.margin = \"\";\r\n    });\r\n    \r\n    // Restore taskbar\r\n    const taskbar = document.getElementById(\"start-bar\");\r\n    if (taskbar) {\r\n      taskbar.style.height = \"\";\r\n    }\r\n  }\r\n  \r\n  // Initialize after a short delay\r\n  setTimeout(initMobileEnhancements, 1000);\r\n});\n\n//# sourceURL=webpack://bbfiller/./src/mobile-enhancements.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/mobile-enhancements.js"]();
/******/ 	
/******/ })()
;