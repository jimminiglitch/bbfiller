/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/accesibility.js":
/*!*****************************!*\
  !*** ./src/accesibility.js ***!
  \*****************************/
/***/ (() => {

eval("/**\r\n * ♿ Enhanced Accessibility Module\r\n * Comprehensive accessibility improvements for desktop-like web interfaces\r\n * - Improved keyboard navigation and focus management\r\n * - ARIA attributes and screen reader announcements\r\n * - Focus trapping for modal dialogs\r\n * - High contrast mode support\r\n */\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  console.log(\"♿ Initializing Enhanced Accessibility Module...\");\r\n\r\n  // ── Configuration ──────────────────────────────────────────────────────────────\r\n  const config = {\r\n    roles: {\r\n      window: \"dialog\",\r\n      desktop: \"application\",\r\n      taskbar: \"toolbar\",\r\n      startMenu: \"menu\",\r\n      startButton: \"button\",\r\n      desktopIcon: \"button\",\r\n      windowContent: \"region\"\r\n    },\r\n    shortcuts: [\r\n      { keys: [\"Escape\"], ctrl: false, alt: false, shift: false, action: closeActiveWindow, description: \"Close active window\" },\r\n      { keys: [\"Tab\"], ctrl: false, alt: true, shift: false, action: () => switchWindow(1), description: \"Switch to next window\" },\r\n      { keys: [\"Tab\"], ctrl: false, alt: true, shift: true, action: () => switchWindow(-1), description: \"Switch to previous window\" },\r\n      { keys: [\"m\"], ctrl: false, alt: true, shift: false, action: minimizeActiveWindow, description: \"Minimize active window\" },\r\n      { keys: [\"m\"], ctrl: false, alt: true, shift: true, action: toggleMaximizeActiveWindow, description: \"Maximize/restore active window\" },\r\n      { keys: [\"F1\"], ctrl: false, alt: false, shift: false, action: showKeyboardShortcutsHelp, description: \"Show keyboard shortcuts help\" },\r\n      { keys: [\"h\"], ctrl: false, alt: true, shift: false, action: toggleHighContrastMode, description: \"Toggle high contrast mode\" }\r\n    ],\r\n    selectors: {\r\n      desktop: \".container\",\r\n      taskbar: \"#start-bar\",\r\n      startButton: \"#start-button\",\r\n      startMenu: \"#start-menu\",\r\n      desktopIcons: \".desktop-icon\",\r\n      windows: \".popup-window\",\r\n      activeWindow: \".window-active\",\r\n      windowTitle: \".window-title\",\r\n      windowContent: \".window-content\",\r\n      windowHeader: \".window-header\",\r\n      closeButton: \".close-btn\"\r\n    },\r\n    announcements: {\r\n      delay: 50, // ms delay before announcing to ensure DOM updates complete\r\n      windowOpened: (title) => `${title} window opened`,\r\n      windowClosed: (title) => `${title} window closed`,\r\n      windowMinimized: (title) => `${title} window minimized`,\r\n      windowMaximized: (title) => `${title} window maximized`,\r\n      windowRestored: (title) => `${title} window restored`,\r\n      startMenuOpened: \"Start menu opened\",\r\n      startMenuClosed: \"Start menu closed\"\r\n    }\r\n  };\r\n\r\n  // ── State Management ────────────────────────────────────────────────────────────\r\n  const state = {\r\n    lastFocusedElement: null,\r\n    isHighContrastMode: false,\r\n    activeModalId: null,\r\n    shortcutsHelpVisible: false\r\n  };\r\n\r\n  // Mock functions for window management (replace with actual implementations)\r\n  function minimizeWindow(windowId) {\r\n    console.log(`Minimize window: ${windowId}`);\r\n  }\r\n\r\n  function toggleMaximize(windowId) {\r\n    console.log(`Toggle maximize window: ${windowId}`);\r\n  }\r\n\r\n  function focusWindow(windowId) {\r\n    console.log(`Focus window: ${windowId}`);\r\n  }\r\n\r\n  // ── Initialization ───────────────────────────────────────────────────────────\r\n  function initialize() {\r\n    try {\r\n      addSkipLinks();\r\n      setupScreenReaderAnnouncer();\r\n      applyAriaAttributes();\r\n      enableKeyboardShortcuts();\r\n      makeWindowsAccessible();\r\n      setupFocusManagement();\r\n      setupEventListeners();\r\n      createKeyboardShortcutsHelp();\r\n      console.log(\"♿ Enhanced Accessibility Module initialized successfully\");\r\n    } catch (error) {\r\n      console.error(\"♿ Error initializing accessibility enhancements:\", error);\r\n    }\r\n  }\r\n\r\n  // Delay initialization to ensure DOM is fully loaded\r\n  setTimeout(initialize, 500);\r\n\r\n  // ── Helpers ───────────────────────────────────────────────────────────────────\r\n  function $(selector, parent = document) {\r\n    return parent.querySelector(selector);\r\n  }\r\n\r\n  function $$(selector, parent = document) {\r\n    return Array.from(parent.querySelectorAll(selector));\r\n  }\r\n\r\n  function setAttr(el, attrs = {}) {\r\n    if (!el) return;\r\n    Object.entries(attrs).forEach(([k, v]) => v != null && el.setAttribute(k, v));\r\n  }\r\n\r\n  function onKeyMatch(e, { keys, ctrl, alt, shift }) {\r\n    return keys.includes(e.key) &&\r\n      !!e.ctrlKey === ctrl &&\r\n      !!e.altKey === alt &&\r\n      !!e.shiftKey === shift;\r\n  }\r\n\r\n  function getWindowTitle(win) {\r\n    if (!win) return \"Window\";\r\n    const titleEl = $(config.selectors.windowTitle, win);\r\n    return titleEl?.textContent?.trim() || win.id || \"Window\";\r\n  }\r\n\r\n  function getFocusableElements(container) {\r\n    if (!container) return [];\r\n    return $$(\r\n      'a[href], button:not([disabled]), input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex=\"0\"]',\r\n      container\r\n    ).filter(el => {\r\n      // Check if element is visible and not hidden by CSS\r\n      const style = window.getComputedStyle(el);\r\n      return style.display !== 'none' && style.visibility !== 'hidden' && el.offsetParent !== null;\r\n    });\r\n  }\r\n\r\n  // ── Screen Reader Announcer ────────────────────────────────────────────────────\r\n  function setupScreenReaderAnnouncer() {\r\n    const announcer = document.createElement(\"div\");\r\n    announcer.id = \"sr-announcer\";\r\n    announcer.setAttribute(\"aria-live\", \"polite\");\r\n    announcer.setAttribute(\"aria-atomic\", \"true\");\r\n    announcer.className = \"sr-only\";\r\n    Object.assign(announcer.style, {\r\n      position: \"absolute\",\r\n      width: \"1px\",\r\n      height: \"1px\",\r\n      padding: \"0\",\r\n      overflow: \"hidden\",\r\n      clip: \"rect(0, 0, 0, 0)\",\r\n      whiteSpace: \"nowrap\",\r\n      border: \"0\"\r\n    });\r\n    document.body.appendChild(announcer);\r\n  }\r\n\r\n  function announce(message, priority = \"polite\") {\r\n    const announcer = $(\"#sr-announcer\");\r\n    if (!announcer) return;\r\n    \r\n    // Set the appropriate aria-live value\r\n    announcer.setAttribute(\"aria-live\", priority);\r\n    \r\n    // Clear the announcer first, then add the new message after a short delay\r\n    announcer.textContent = \"\";\r\n    \r\n    setTimeout(() => {\r\n      announcer.textContent = message;\r\n    }, config.announcements.delay);\r\n  }\r\n\r\n  // ── Skip Links ────────────────────────────────────────────────────────────────\r\n  function addSkipLinks() {\r\n    const skipLinks = [\r\n      { target: \"#desktop-icons\", text: \"Skip to desktop icons\" },\r\n      { target: config.selectors.taskbar, text: \"Skip to taskbar\" }\r\n    ];\r\n\r\n    const skipLinksContainer = document.createElement(\"div\");\r\n    skipLinksContainer.className = \"skip-links\";\r\n    Object.assign(skipLinksContainer.style, {\r\n      position: \"absolute\",\r\n      top: \"0\",\r\n      left: \"0\",\r\n      zIndex: \"10000\"\r\n    });\r\n\r\n    skipLinks.forEach(({ target, text }) => {\r\n      const link = document.createElement(\"a\");\r\n      link.href = target;\r\n      link.textContent = text;\r\n      link.className = \"skip-link\";\r\n      Object.assign(link.style, {\r\n        position: \"absolute\",\r\n        top: \"-40px\",\r\n        left: \"0\",\r\n        padding: \"8px\",\r\n        background: \"#000\",\r\n        color: \"#0ff\",\r\n        zIndex: \"10000\",\r\n        transition: \"top 0.2s ease\",\r\n        textDecoration: \"none\",\r\n        fontWeight: \"bold\",\r\n        border: \"2px solid #0ff\"\r\n      });\r\n      link.addEventListener(\"focus\", () => link.style.top = \"0\");\r\n      link.addEventListener(\"blur\", () => link.style.top = \"-40px\");\r\n      link.addEventListener(\"click\", (e) => {\r\n        e.preventDefault();\r\n        const targetEl = $(target);\r\n        if (targetEl) {\r\n          targetEl.focus();\r\n          targetEl.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n      });\r\n      skipLinksContainer.appendChild(link);\r\n    });\r\n\r\n    document.body.prepend(skipLinksContainer);\r\n  }\r\n\r\n  // ── ARIA Setup ────────────────────────────────────────────────────────────────\r\n  function applyAriaAttributes() {\r\n    // Desktop container\r\n    const desktop = $(config.selectors.desktop);\r\n    desktop && setAttr(desktop, {\r\n      role: config.roles.desktop,\r\n      \"aria-label\": \"Desktop\",\r\n      tabindex: \"-1\"\r\n    });\r\n\r\n    // Taskbar\r\n    const taskbar = $(config.selectors.taskbar);\r\n    taskbar && setAttr(taskbar, {\r\n      role: config.roles.taskbar,\r\n      \"aria-label\": \"Taskbar\",\r\n      tabindex: \"0\"\r\n    });\r\n\r\n    // Start button + menu\r\n    setupStartMenu();\r\n\r\n    // Desktop icons\r\n    setupDesktopIcons();\r\n  }\r\n\r\n  function setupStartMenu() {\r\n    const startButton = $(config.selectors.startButton);\r\n    const startMenu = $(config.selectors.startMenu);\r\n\r\n    if (startButton) {\r\n      setAttr(startButton, {\r\n        role: config.roles.startButton,\r\n        \"aria-label\": \"Start Menu\",\r\n        \"aria-haspopup\": \"true\",\r\n        \"aria-expanded\": \"false\",\r\n        tabindex: \"0\"\r\n      });\r\n\r\n      startButton.addEventListener(\"click\", () => {\r\n        const expanded = startMenu?.style.display === \"block\";\r\n        startButton.setAttribute(\"aria-expanded\", String(expanded));\r\n        \r\n        if (expanded) {\r\n          announce(config.announcements.startMenuOpened);\r\n          \r\n          // Make menu items focusable and focus the first one\r\n          const menuItems = startMenu ? $$(config.selectors.startMenu + \" a, \" + config.selectors.startMenu + \" button\") : [];\r\n          menuItems.forEach(item => {\r\n            setAttr(item, { role: \"menuitem\", tabindex: \"0\" });\r\n          });\r\n          \r\n          if (menuItems.length > 0) {\r\n            menuItems[0].focus();\r\n          }\r\n        } else {\r\n          announce(config.announcements.startMenuClosed);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (startMenu) {\r\n      setAttr(startMenu, {\r\n        role: config.roles.startMenu,\r\n        \"aria-label\": \"Start Menu\"\r\n      });\r\n\r\n      // Add keyboard navigation for start menu\r\n      startMenu.addEventListener(\"keydown\", (e) => {\r\n        const menuItems = $$(config.selectors.startMenu + \" a, \" + config.selectors.startMenu + \" button\");\r\n        const currentIndex = menuItems.findIndex(item => item === document.activeElement);\r\n        \r\n        switch (e.key) {\r\n          case \"ArrowDown\":\r\n            e.preventDefault();\r\n            if (currentIndex < menuItems.length - 1) {\r\n              menuItems[currentIndex + 1].focus();\r\n            } else {\r\n              menuItems[0].focus();\r\n            }\r\n            break;\r\n          case \"ArrowUp\":\r\n            e.preventDefault();\r\n            if (currentIndex > 0) {\r\n              menuItems[currentIndex - 1].focus();\r\n            } else {\r\n              menuItems[menuItems.length - 1].focus();\r\n            }\r\n            break;\r\n          case \"Escape\":\r\n            e.preventDefault();\r\n            startButton.click(); // Close the menu\r\n            startButton.focus(); // Return focus to start button\r\n            break;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function setupDesktopIcons() {\r\n    $$(config.selectors.desktopIcons).forEach(icon => {\r\n      const label = icon.querySelector(\"span\")?.textContent || icon.id.replace(/^icon-/, \"\");\r\n      setAttr(icon, {\r\n        role: config.roles.desktopIcon,\r\n        tabindex: \"0\",\r\n        \"aria-label\": `Open ${label}`\r\n      });\r\n\r\n      // Add keyboard support\r\n      icon.addEventListener(\"keydown\", e => {\r\n        if (e.key === \"Enter\" || e.key === \" \") {\r\n          e.preventDefault();\r\n          icon.click();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // ── Keyboard Shortcuts ────────────────────────────────────────────────────────\r\n  function enableKeyboardShortcuts() {\r\n    document.addEventListener(\"keydown\", e => {\r\n      // Skip if user is typing in an input field\r\n      if ([\"INPUT\", \"TEXTAREA\", \"SELECT\"].includes(document.activeElement.tagName)) {\r\n        return;\r\n      }\r\n\r\n      for (const sc of config.shortcuts) {\r\n        if (onKeyMatch(e, sc)) {\r\n          e.preventDefault();\r\n          sc.action();\r\n          break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // Shortcut Actions\r\n  function closeActiveWindow() {\r\n    const win = $(config.selectors.activeWindow);\r\n    if (!win) return;\r\n    \r\n    const title = getWindowTitle(win);\r\n    const closeBtn = $(config.selectors.closeButton, win);\r\n    \r\n    if (closeBtn) {\r\n      closeBtn.click();\r\n      announce(config.announcements.windowClosed(title));\r\n    }\r\n  }\r\n\r\n  function minimizeActiveWindow() {\r\n    const win = $(config.selectors.activeWindow);\r\n    if (!win) return;\r\n    \r\n    const title = getWindowTitle(win);\r\n    \r\n    if (typeof minimizeWindow === \"function\") {\r\n      minimizeWindow(win.id);\r\n      announce(config.announcements.windowMinimized(title));\r\n    }\r\n  }\r\n\r\n  function toggleMaximizeActiveWindow() {\r\n    const win = $(config.selectors.activeWindow);\r\n    if (!win) return;\r\n    \r\n    const title = getWindowTitle(win);\r\n    const isMaximized = win.classList.contains(\"maximized\");\r\n    \r\n    if (typeof toggleMaximize === \"function\") {\r\n      toggleMaximize(win.id);\r\n      \r\n      // Announce the new state after a short delay to ensure the DOM has updated\r\n      setTimeout(() => {\r\n        const newIsMaximized = win.classList.contains(\"maximized\");\r\n        if (newIsMaximized && !isMaximized) {\r\n          announce(config.announcements.windowMaximized(title));\r\n        } else if (!newIsMaximized && isMaximized) {\r\n          announce(config.announcements.windowRestored(title));\r\n        }\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  function switchWindow(direction) {\r\n    const wins = $$(config.selectors.windows).filter(w => w.style.display !== \"none\");\r\n    if (!wins.length) return;\r\n\r\n    const active = $(config.selectors.activeWindow);\r\n    let idx = active ? wins.indexOf(active) : -1;\r\n    idx = (idx + direction + wins.length) % wins.length;\r\n    const target = wins[idx];\r\n    \r\n    if (typeof focusWindow === \"function\") {\r\n      focusWindow(target.id);\r\n      announce(getWindowTitle(target) + \" window activated\");\r\n    }\r\n  }\r\n\r\n  function toggleHighContrastMode() {\r\n    state.isHighContrastMode = !state.isHighContrastMode;\r\n    \r\n    if (state.isHighContrastMode) {\r\n      document.body.classList.add(\"high-contrast-mode\");\r\n      announce(\"High contrast mode enabled\");\r\n    } else {\r\n      document.body.classList.remove(\"high-contrast-mode\");\r\n      announce(\"High contrast mode disabled\");\r\n    }\r\n    \r\n    // Add high contrast styles if they don't exist\r\n    if (state.isHighContrastMode && !$(\"#high-contrast-styles\")) {\r\n      const style = document.createElement(\"style\");\r\n      style.id = \"high-contrast-styles\";\r\n      style.textContent = `\r\n        .high-contrast-mode {\r\n          filter: invert(100%);\r\n        }\r\n        .high-contrast-mode img,\r\n        .high-contrast-mode video {\r\n          filter: invert(100%);\r\n        }\r\n        .high-contrast-mode * {\r\n          background-color: white !important;\r\n          color: black !important;\r\n          border-color: black !important;\r\n        }\r\n        .high-contrast-mode .window-active {\r\n          outline: 3px solid yellow !important;\r\n        }\r\n      `;\r\n      document.head.appendChild(style);\r\n    }\r\n  }\r\n\r\n  // ── Window Accessibility ────────────────────────────────────────────────────\r\n  function makeWindowsAccessible() {\r\n    $$(config.selectors.windows).forEach(win => {\r\n      const titleEl = $(config.selectors.windowTitle, win);\r\n      const titleText = getWindowTitle(win);\r\n      \r\n      // Set window role and label\r\n      if (titleEl) {\r\n        titleEl.id ||= `title-${win.id || Math.random().toString(36).substring(2, 9)}`;\r\n        setAttr(win, {\r\n          role: config.roles.window,\r\n          \"aria-labelledby\": titleEl.id,\r\n          tabindex: \"-1\"\r\n        });\r\n      } else {\r\n        setAttr(win, {\r\n          role: config.roles.window,\r\n          \"aria-label\": titleText,\r\n          tabindex: \"-1\"\r\n        });\r\n      }\r\n\r\n      // Set content region\r\n      const content = $(config.selectors.windowContent, win);\r\n      content && setAttr(content, {\r\n        role: config.roles.windowContent,\r\n        \"aria-label\": `${titleText} content`\r\n      });\r\n\r\n      // Set close button\r\n      const closeBtn = $(config.selectors.closeButton, win);\r\n      closeBtn && setAttr(closeBtn, {\r\n        \"aria-label\": `Close ${titleText}`,\r\n        tabindex: \"0\"\r\n      });\r\n\r\n      // Set window header\r\n      const header = $(config.selectors.windowHeader, win);\r\n      if (header) {\r\n        setAttr(header, {\r\n          role: \"heading\",\r\n          tabindex: \"0\",\r\n          \"aria-level\": \"1\",\r\n          \"aria-label\": `${titleText} - double-click to maximize`\r\n        });\r\n      }\r\n\r\n      // Add keyboard support for window controls\r\n      setupWindowKeyboardControls(win);\r\n    });\r\n\r\n    // Watch for new windows being added to the DOM\r\n    setupWindowObserver();\r\n  }\r\n\r\n  function setupWindowKeyboardControls(win) {\r\n    if (!win) return;\r\n    \r\n    // Add keyboard support for window header (maximize on Enter)\r\n    const header = $(config.selectors.windowHeader, win);\r\n    if (header) {\r\n      header.addEventListener(\"keydown\", e => {\r\n        if (e.key === \"Enter\") {\r\n          e.preventDefault();\r\n          if (typeof toggleMaximize === \"function\") {\r\n            toggleMaximize(win.id);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // Make sure all interactive elements are keyboard accessible\r\n    const interactiveElements = $$('button, a, [role=\"button\"]', win);\r\n    interactiveElements.forEach(el => {\r\n      if (!el.hasAttribute(\"tabindex\")) {\r\n        el.setAttribute(\"tabindex\", \"0\");\r\n      }\r\n    });\r\n  }\r\n\r\n  // ── Focus Management ────────────────────────────────────────────────────────\r\n  function setupFocusManagement() {\r\n    // Track the last focused element before a modal opens\r\n    document.addEventListener(\"focusin\", e => {\r\n      if (!state.activeModalId) {\r\n        state.lastFocusedElement = e.target;\r\n      }\r\n    });\r\n\r\n    // Set up focus trapping for windows\r\n    $$(config.selectors.windows).forEach(win => {\r\n      setupFocusTrap(win);\r\n    });\r\n  }\r\n\r\n  function setupFocusTrap(container) {\r\n    if (!container) return;\r\n    \r\n    container.addEventListener(\"keydown\", e => {\r\n      // Only trap focus if this window is active and modal\r\n      if (!container.classList.contains(\"window-active\") || \r\n          !container.classList.contains(\"modal\")) {\r\n        return;\r\n      }\r\n      \r\n      if (e.key === \"Tab\") {\r\n        const focusableElements = getFocusableElements(container);\r\n        if (focusableElements.length === 0) return;\r\n        \r\n        const firstElement = focusableElements[0];\r\n        const lastElement = focusableElements[focusableElements.length - 1];\r\n        \r\n        if (e.shiftKey && document.activeElement === firstElement) {\r\n          e.preventDefault();\r\n          lastElement.focus();\r\n        } else if (!e.shiftKey && document.activeElement === lastElement) {\r\n          e.preventDefault();\r\n          firstElement.focus();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // ── Event Listeners ────────────────────────────────────────────────────────\r\n  function setupEventListeners() {\r\n    // Listen for window open events\r\n    document.addEventListener(\"windowOpened\", e => {\r\n      const winId = e.detail?.windowId;\r\n      if (!winId) return;\r\n      \r\n      const win = $(`#${winId}`);\r\n      if (!win) return;\r\n      \r\n      // Make window accessible\r\n      makeWindowsAccessible();\r\n      \r\n      // Set up focus trap\r\n      setupFocusTrap(win);\r\n      \r\n      // Focus the window\r\n      win.focus();\r\n      \r\n      // Announce window opened\r\n      const title = getWindowTitle(win);\r\n      announce(config.announcements.windowOpened(title));\r\n      \r\n      // If modal, store active modal ID and last focused element\r\n      if (win.classList.contains(\"modal\")) {\r\n        state.activeModalId = winId;\r\n      }\r\n    });\r\n\r\n    // Listen for window close events\r\n    document.addEventListener(\"windowClosed\", e => {\r\n      const winId = e.detail?.windowId;\r\n      if (!winId) return;\r\n      \r\n      // If this was the active modal, restore focus\r\n      if (state.activeModalId === winId) {\r\n        state.activeModalId = null;\r\n        if (state.lastFocusedElement) {\r\n          state.lastFocusedElement.focus();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // ── Window Observer ────────────────────────────────────────────────────────\r\n  function setupWindowObserver() {\r\n    // Watch for new windows being added to the DOM\r\n    const observer = new MutationObserver(mutations => {\r\n      let newWindowAdded = false;\r\n      \r\n      mutations.forEach(mutation => {\r\n        if (mutation.type === 'childList') {\r\n          mutation.addedNodes.forEach(node => {\r\n            if (node.nodeType === 1 && node.matches(config.selectors.windows)) {\r\n              newWindowAdded = true;\r\n              makeWindowsAccessible();\r\n              setupFocusTrap(node);\r\n            }\r\n          });\r\n        }\r\n      });\r\n      \r\n      if (newWindowAdded) {\r\n        console.log(\"♿ New window detected, accessibility attributes applied\");\r\n      }\r\n    });\r\n    \r\n    observer.observe(document.body, { childList: true, subtree: true });\r\n  }\r\n\r\n  // ── Keyboard Shortcuts Help ────────────────────────────────────────────────\r\n  function createKeyboardShortcutsHelp() {\r\n    const helpWindow = document.createElement(\"div\");\r\n    helpWindow.id = \"keyboard-shortcuts-help\";\r\n    helpWindow.className = \"popup-window\";\r\n    helpWindow.style.display = \"none\";\r\n    helpWindow.style.zIndex = \"10000\";\r\n    helpWindow.style.width = \"400px\";\r\n    helpWindow.style.height = \"auto\";\r\n    helpWindow.style.maxHeight = \"80vh\";\r\n    helpWindow.style.overflow = \"auto\";\r\n    \r\n    helpWindow.innerHTML = `\r\n      <div class=\"window-header\">\r\n        <div class=\"window-title\">Keyboard Shortcuts</div>\r\n        <div class=\"window-controls\">\r\n          <button class=\"close-btn\" aria-label=\"Close keyboard shortcuts help\">×</button>\r\n        </div>\r\n      </div>\r\n      <div class=\"window-content\">\r\n        <table style=\"width: 100%; border-collapse: collapse;\">\r\n          <thead>\r\n            <tr>\r\n              <th style=\"text-align: left; padding: 8px; border-bottom: 1px solid #ccc;\">Shortcut</th>\r\n              <th style=\"text-align: left; padding: 8px; border-bottom: 1px solid #ccc;\">Description</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            ${config.shortcuts.map(sc => `\r\n              <tr>\r\n                <td style=\"padding: 8px; border-bottom: 1px solid #ccc;\">\r\n                  ${sc.ctrl ? 'Ctrl+' : ''}${sc.alt ? 'Alt+' : ''}${sc.shift ? 'Shift+' : ''}${sc.keys[0]}\r\n                </td>\r\n                <td style=\"padding: 8px; border-bottom: 1px solid #ccc;\">${sc.description}</td>\r\n              </tr>\r\n            `).join('')}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    `;\r\n    \r\n    document.body.appendChild(helpWindow);\r\n    \r\n    // Add close button functionality\r\n    const closeBtn = helpWindow.querySelector(\".close-btn\");\r\n    if (closeBtn) {\r\n      closeBtn.addEventListener(\"click\", () => {\r\n        helpWindow.style.display = \"none\";\r\n        state.shortcutsHelpVisible = false;\r\n        if (state.lastFocusedElement) {\r\n          state.lastFocusedElement.focus();\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Make the help window accessible\r\n    setAttr(helpWindow, {\r\n      role: config.roles.window,\r\n      \"aria-label\": \"Keyboard Shortcuts Help\",\r\n      tabindex: \"-1\"\r\n    });\r\n    \r\n    setupFocusTrap(helpWindow);\r\n  }\r\n\r\n  function showKeyboardShortcutsHelp() {\r\n    const helpWindow = $(\"#keyboard-shortcuts-help\");\r\n    if (!helpWindow) return;\r\n    \r\n    state.lastFocusedElement = document.activeElement;\r\n    helpWindow.style.display = \"block\";\r\n    state.shortcutsHelpVisible = true;\r\n    \r\n    // Position the window in the center\r\n    helpWindow.style.left = \"50%\";\r\n    helpWindow.style.top = \"50%\";\r\n    helpWindow.style.transform = \"translate(-50%, -50%)\";\r\n    \r\n    // Focus the window\r\n    helpWindow.focus();\r\n    \r\n    // Announce\r\n    announce(\"Keyboard shortcuts help opened\");\r\n  }\r\n});\r\n\r\n// Add high contrast mode styles\r\nconst highContrastStyles = document.createElement(\"style\");\r\nhighContrastStyles.textContent = `\r\n  .high-contrast-mode {\r\n    filter: invert(100%);\r\n  }\r\n  .high-contrast-mode img,\r\n  .high-contrast-mode video {\r\n    filter: invert(100%);\r\n  }\r\n  .sr-only {\r\n    position: absolute;\r\n    width: 1px;\r\n    height: 1px;\r\n    padding: 0;\r\n    margin: -1px;\r\n    overflow: hidden;\r\n    clip: rect(0, 0, 0, 0);\r\n    white-space: nowrap;\r\n    border: 0;\r\n  }\r\n`;\r\ndocument.head.appendChild(highContrastStyles);\r\n\r\nconsole.log(\"Accessibility Enhancements script loaded\");style.backgroundColor = \"#000\";\r\n    skipLink.style.color = \"#00ffff\";\r\n    skipLink.style.zIndex = \"10000\";\r\n    skipLink.style.transition = \"top 0.2s ease\";\r\n    \r\n    // Show on focus\r\n    skipLink.addEventListener(\"focus\", () => {\r\n      skipLink.style.top = \"0\";\r\n    });\r\n    \r\n    // Hide on blur\r\n    skipLink.addEventListener(\"blur\", () => {\r\n      skipLink.style.top = \"-40px\";\r\n    });\r\n    \r\n    // Add to document\r\n    document.body.insertBefore(skipLink, document.body.firstChild);\r\n  \r\n  \r\n  // Make windows accessible\r\n  function makeWindowsAccessible() {\r\n    const windows = document.querySelectorAll(\".popup-window\");\r\n    \r\n    windows.forEach(win => {\r\n      // Add dialog role\r\n      win.setAttribute(\"role\", config.roles.window);\r\n      \r\n      // Get window title\r\n      const titleElement = win.querySelector(\".window-title\");\r\n      const title = titleElement ? titleElement.textContent : win.id;\r\n      \r\n      // Set aria-labelledby if title element exists\r\n      if (titleElement) {\r\n        titleElement.id = titleElement.id || `title-${win.id}`;\r\n        win.setAttribute(\"aria-labelledby\", titleElement.id);\r\n      } else {\r\n        // Otherwise set aria-label\r\n        win.setAttribute(\"aria-label\", title);\r\n      }\r\n      \r\n      // Make window content accessible\r\n      const content = win.querySelector(\".window-content\");\r\n      if (content) {\r\n        content.setAttribute(\"role\", \"region\");\r\n        content.setAttribute(\"aria-label\", `${title} content`);\r\n      }\r\n      \r\n      // Make close button accessible\r\n      const closeBtn = win.querySelector(\".close-btn\");\r\n      if (closeBtn) {\r\n        closeBtn.setAttribute(\"aria-label\", `Close ${title}`);\r\n      }\r\n      \r\n      // Add keyboard support for window header (for dragging)\r\n      const header = win.querySelector(\".window-header\");\r\n      if (header) {\r\n        header.setAttribute(\"role\", \"heading\");\r\n        header.setAttribute(\"aria-level\", \"1\");\r\n        header.setAttribute(\"tabindex\", \"0\");\r\n        header.setAttribute(\"aria-label\", `${title} - Double click to maximize`);\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Initialize after a short delay\r\n  setTimeout(initAccessibility, 1000);\r\n;\n\n//# sourceURL=webpack://bbfiller/./src/accesibility.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/accesibility.js"]();
/******/ 	
/******/ })()
;