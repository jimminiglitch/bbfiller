// ULTRA TRIPPY BOOT SEQUENCE - Psychedelic Cyberpunk Edition
document.addEventListener("DOMContentLoaded", function() {
  console.log("ðŸŒ€ Initiating psychedelic boot sequence");
  
  const bootScreen = document.getElementById("bootScreen");
  const bootLog = document.getElementById("boot-log");
  const progressBar = document.getElementById("progress-bar");
  const container = document.querySelector(".container");
  
  // Hide desktop initially
  container.style.display = "none";
  
  // â€”â€”â€” PSYCHEDELIC CONTROLS â€”â€”â€”
  const MIN_DELAY = 80;     // Faster for more intensity
  const MAX_DELAY = 300;    // Shorter max delay for better pacing
  function getNextDelay() {
    return Math.random() * (MAX_DELAY - MIN_DELAY) + MIN_DELAY;
  }

  // â€”â€”â€” ENHANCED AUDIO SYSTEM â€”â€”â€”
  // Main glitch sound
  const glitchSfx = new Audio('https://cdn.glitch.global/25331b85-e206-4347-93a8-666983818ff8/boot.mp3?v=1746845093718');
  glitchSfx.volume = 0.3;
  
  // Additional sound effects
  const glitchSounds = [
    { audio: new Audio('https://cdn.glitch.global/25331b85-e206-4347-93a8-666983818ff8/glitch1.mp3?v=1746845093718'), volume: 0.2 },
    { audio: new Audio('https://cdn.glitch.global/25331b85-e206-4347-93a8-666983818ff8/glitch2.mp3?v=1746845093718'), volume: 0.15 },
    { audio: new Audio('https://cdn.glitch.global/25331b85-e206-4347-93a8-666983818ff8/glitch3.mp3?v=1746845093718'), volume: 0.25 }
  ];
  
  // Low frequency drone for ambience
  const droneSfx = new Audio('https://cdn.glitch.global/25331b85-e206-4347-93a8-666983818ff8/psychtoad.mp3?v=1746846223194');
  droneSfx.volume = 0.1;
  droneSfx.loop = true;
  
  // Play a random glitch sound
  function playRandomGlitch() {
    if (Math.random() < 0.4) { // Increased probability
      const soundIndex = Math.floor(Math.random() * glitchSounds.length);
      try {
        glitchSounds[soundIndex].audio.currentTime = 0;
        glitchSounds[soundIndex].audio.play().catch(e => console.log("Audio play prevented by browser"));
      } catch (e) {
        console.log("Audio error:", e);
      }
    }
  }
  
  // Start ambient drone
  try {
    droneSfx.play().catch(e => console.log("Ambient audio play prevented by browser"));
  } catch (e) {
    console.log("Ambient audio error:", e);
  }
  
  // â€”â€”â€” ENHANCED VISUAL EFFECTS â€”â€”â€”
  // Create a canvas for particle effects
  const particleCanvas = document.createElement("canvas");
  particleCanvas.classList.add("particle-canvas");
  particleCanvas.style.position = "absolute";
  particleCanvas.style.top = "0";
  particleCanvas.style.left = "0";
  particleCanvas.style.width = "100%";
  particleCanvas.style.height = "100%";
  particleCanvas.style.pointerEvents = "none";
  particleCanvas.style.zIndex = "9998";
  bootScreen.appendChild(particleCanvas);
  
  // Initialize particle system
  const particles = [];
  const ctx = particleCanvas.getContext("2d");
  
  function resizeCanvas() {
    particleCanvas.width = window.innerWidth;
    particleCanvas.height = window.innerHeight;
  }
  resizeCanvas();
  window.addEventListener("resize", resizeCanvas);
  
  // Create particles
  function createParticles(count) {
    for (let i = 0; i < count; i++) {
      particles.push({
        x: Math.random() * particleCanvas.width,
        y: Math.random() * particleCanvas.height,
        size: Math.random() * 3 + 1,
        speedX: (Math.random() - 0.5) * 3,
        speedY: (Math.random() - 0.5) * 3,
        color: `hsl(${Math.random() * 60 + 160}, 100%, 50%)`, // Cyan to blue hues
        alpha: Math.random() * 0.7 + 0.3
      });
    }
  }
  
  // Animate particles
  function animateParticles() {
    ctx.clearRect(0, 0, particleCanvas.width, particleCanvas.height);
    
    // Update and draw particles
    for (let i = 0; i < particles.length; i++) {
      const p = particles[i];
      
      // Update position
      p.x += p.speedX;
      p.y += p.speedY;
      
      // Wrap around edges
      if (p.x < 0) p.x = particleCanvas.width;
      if (p.x > particleCanvas.width) p.x = 0;
      if (p.y < 0) p.y = particleCanvas.height;
      if (p.y > particleCanvas.height) p.y = 0;
      
      // Draw particle
      ctx.globalAlpha = p.alpha;
      ctx.fillStyle = p.color;
      ctx.beginPath();
      ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
      ctx.fill();
    }
    
    requestAnimationFrame(animateParticles);
  }
  
  // Start particle system
  createParticles(100);
  animateParticles();
  
  // â€”â€”â€” ENHANCED JITTER EFFECTS â€”â€”â€”
  function jitterScreen() {
    // More extreme jitter
    const x = (Math.random() - 0.5) * 12;  // Â±6px
    const y = (Math.random() - 0.5) * 12;
    
    // Apply to both container and boot log for more chaotic effect
    bootLog.style.transform = `translate(${x * 0.7}px, ${y * 0.7}px)`;
    
    // Random color shift
    if (Math.random() < 0.3) {
      const hueShift = Math.floor(Math.random() * 40) - 20;
      bootLog.style.filter = `hue-rotate(${hueShift}deg)`;
      setTimeout(() => bootLog.style.filter = '', 120);
    }
    
    // Random scale jitter
    if (Math.random() < 0.2) {
      const scale = 1 + (Math.random() * 0.1 - 0.05);
      bootLog.style.transform += ` scale(${scale})`;
    }
    
    // Reset after short delay
    setTimeout(() => {
      bootLog.style.transform = '';
    }, 100);
  }
  
  // More extreme RGB split effect
  function rgbSplitEffect() {
    bootLog.classList.add('extreme-rgb-split');
    setTimeout(() => bootLog.classList.remove('extreme-rgb-split'), 150);
  }
  
  // Random glitch blocks effect
  function glitchBlocksEffect() {
    bootLog.classList.add('glitch-blocks');
    setTimeout(() => bootLog.classList.remove('glitch-blocks'), 200);
  }
  
  // Wave distortion effect
  function waveDistortionEffect() {
    bootLog.classList.add('wave-distortion');
    setTimeout(() => bootLog.classList.remove('wave-distortion'), 500);
  }
  
  // Apply a random visual effect
  function applyRandomEffect() {
    const effectRoll = Math.random();
    
    if (effectRoll < 0.3) {
      rgbSplitEffect();
    } else if (effectRoll < 0.6) {
      glitchBlocksEffect();
    } else if (effectRoll < 0.8) {
      waveDistortionEffect();
    } else {
      // Combine multiple effects for extra trippy moments
      rgbSplitEffect();
      setTimeout(glitchBlocksEffect, 100);
    }
    
    // Always jitter for tactile feedback
    jitterScreen();
  }
  
  // Create image element for profile picture with enhanced effects
  const profileContainer = document.createElement("div");
  profileContainer.style.textAlign = "center";
  profileContainer.style.marginBottom = "20px";
  profileContainer.style.position = "flex";
  
  
  
  // Add glow effect container behind the image
  const glowEffect = document.createElement("div");
  glowEffect.classList.add("image-glow-effect");
  glowEffect.style.position = "absolute";
  glowEffect.style.top = "0";
  glowEffect.style.left = "50%";
  glowEffect.style.transform = "translateX(-50%)";
  glowEffect.style.width = "150px";
  glowEffect.style.height = "150px";
  glowEffect.style.borderRadius = "50%";
  glowEffect.style.zIndex = "1";
  
  // Add image and glow to container
  profileContainer.appendChild(glowEffect);
  profileContainer.appendChild(profileImage);
  
  // Add image to boot screen BEFORE the boot log
  bootLog.parentNode.insertBefore(profileContainer, bootLog);
  
  // Trippy boot messages
  const bootMessages = [
    "Initializing neural interface...",
    "Bypassing reality filters...",
    "Injecting perception modifiers...",
    "Recalibrating sensory inputs...",
    "Dissolving cognitive boundaries...",
    "Fragmenting linear time constructs...",
    "Synthesizing quantum consciousness...",
    "Activating psychedelic protocols...",
    "Transcending dimensional limits...",
    "REALITY OVERRIDE COMPLETE"
  ];
  
  let currentLine = 0;
  let currentChar = 0;
  let bootInterval;
  
  // Faster typing for more intensity
  const charDelay = 8; 
  const lineDelay = 150;
  const bootCompleteDelay = 800; // Longer for dramatic effect
  
  // Start the boot sequence
  startBoot();
  
  function startBoot() {
    bootInterval = setInterval(typeBootMessage, charDelay);
    updateProgressBar(0);
    
    // Show profile image after a short delay with glitch effect
    setTimeout(() => {
      profileImage.style.opacity = "1";
      
      // Start pulsing glow effect
      glowEffect.classList.add('pulsing-glow');
      
      // Add periodic glitch to the image
      setInterval(() => {
        if (Math.random() < 0.3 && bootScreen.style.display !== "none") {
          profileImage.classList.add('glitch-img');
          setTimeout(() => profileImage.classList.remove('glitch-img'), 200);
        }
      }, 2000);
    }, 800);
  }
  
  function typeBootMessage() {
    if (currentLine < bootMessages.length) {
      const message = bootMessages[currentLine];
      
      if (currentChar < message.length) {
        // Type one more character
        bootLog.innerHTML += message.charAt(currentChar);
        
        // Apply random effects with higher probability for more intensity
        if (Math.random() < 0.15) {
          applyRandomEffect();
          playRandomGlitch();
        }
        
        // Advance char index and progress bar
        currentChar++;
        updateProgressBar(
          (currentLine / bootMessages.length) * 70 +
          (currentChar / message.length) * (30 / bootMessages.length)
        );
      } else {
        bootLog.innerHTML += "<br>";
        currentLine++;
        currentChar = 0;
        clearInterval(bootInterval);
        
        // Special handling for the last message
        if (currentLine === bootMessages.length - 1) {
          // Make the last message stand out with extreme effects
          setTimeout(() => {
            // Major glitch effect before final message
            applyRandomEffect();
            playRandomGlitch();
            
            setTimeout(() => {
              // Final message with intense styling
              bootLog.innerHTML += `<span class="final-message">${bootMessages[currentLine]}</span>`;
              
              // Trigger multiple effects in sequence
              rgbSplitEffect();
              setTimeout(glitchBlocksEffect, 200);
              setTimeout(waveDistortionEffect, 400);
              
              // Shake the screen violently
              jitterScreen();
              setTimeout(jitterScreen, 100);
              setTimeout(jitterScreen, 200);
              
              // Play multiple glitch sounds
              glitchSfx.play().catch(e => console.log("Audio play prevented"));
              setTimeout(() => playRandomGlitch(), 100);
              setTimeout(() => playRandomGlitch(), 300);
              
              // Complete the boot sequence
              updateProgressBar(100);
              setTimeout(completeBootSequence, bootCompleteDelay);
            }, 300);
          }, lineDelay * 2);
        } else if (currentLine < bootMessages.length) {
          // Apply effect between lines
          applyRandomEffect();
          playRandomGlitch();
          
          setTimeout(() => {
            bootInterval = setInterval(typeBootMessage, charDelay);
          }, lineDelay);
        }
      }
    }
  }
  
  // Enhanced progress bar with more visual effects
  function updateProgressBar(percentage) {
    progressBar.style.width = percentage + "%";
    
    // Enhanced glow effect as progress increases
    const glowIntensity = Math.min(15, percentage / 7);
    const glowColor = `rgba(0, ${200 + Math.sin(percentage/10) * 55}, ${255 - Math.cos(percentage/15) * 55}, 0.8)`;
    progressBar.style.boxShadow = `0 0 ${glowIntensity}px ${glowColor}`;
    
    // Occasionally add color shift to progress bar
    if (Math.random() < 0.1) {
      const hue = 180 + Math.sin(percentage/10) * 30; // Cycle around cyan
      progressBar.style.backgroundColor = `hsl(${hue}, 100%, 50%)`;
      setTimeout(() => {
        progressBar.style.backgroundColor = "#00ffff";
      }, 300);
    }
    
    // Add glitch to progress bar occasionally
    if (Math.random() < 0.05) {
      progressBar.classList.add("progress-glitch");
      setTimeout(() => {
        progressBar.classList.remove("progress-glitch");
      }, 200);
    }
  }
  
  // Final boot sequence with enhanced transition effects
  function completeBootSequence() {
    // Create a flash effect
    const flashOverlay = document.createElement("div");
    flashOverlay.style.position = "fixed";
    flashOverlay.style.top = "0";
    flashOverlay.style.left = "0";
    flashOverlay.style.width = "100%";
    flashOverlay.style.height = "100%";
    flashOverlay.style.backgroundColor = "#00ffff";
    flashOverlay.style.opacity = "0";
    flashOverlay.style.zIndex = "10000";
    flashOverlay.style.transition = "opacity 0.1s ease";
    document.body.appendChild(flashOverlay);
    
    // Flash effect
    flashOverlay.style.opacity = "0.7";
    setTimeout(() => {
      flashOverlay.style.opacity = "0";
      
      // Major glitch effect
      applyRandomEffect();
      applyRandomEffect();
      
      // Fade out boot screen with glitch transition
      bootScreen.classList.add("glitch-transition-out");
      bootScreen.style.transition = "opacity 0.5s ease";
      bootScreen.style.opacity = "0";
      
      // Play transition sounds
      glitchSfx.play().catch(e => console.log("Audio play prevented"));
      setTimeout(() => playRandomGlitch(), 100);
      
      setTimeout(() => {
        bootScreen.style.display = "none";
        container.style.display = "block";
        
        // Fade out ambient sound
        if (droneSfx) {
          const fadeInterval = setInterval(() => {
            if (droneSfx.volume > 0.01) {
              droneSfx.volume -= 0.01;
            } else {
              droneSfx.pause();
              clearInterval(fadeInterval);
            }
          }, 100);
        }
        
        // Remove flash overlay
        document.body.removeChild(flashOverlay);
        
        // Initialize desktop components
        if (typeof initDesktop === 'function') {
          initDesktop();
        }
      }, 500);
    }, 150);
    
    console.log("ðŸŒ€ Psychedelic boot sequence complete");
  }
});